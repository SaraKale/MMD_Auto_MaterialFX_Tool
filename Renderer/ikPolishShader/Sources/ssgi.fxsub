//-----------------------------------------------------------------------------
// SSGI

#if ENABLE_SSGI > 0

// 色
float4 GetSSGIBaseColor(float2 uv)
{
	// return tex2D(FullWorkSampBorder, uv);
	return tex2D(HalfWorkSampBorder3, uv);
}

#define SSGIRayCount	(SSAORayCount * 1)

VS_SSAO_OUTPUT VS_SSGI( float4 Pos : POSITION, float2 Tex : TEXCOORD0 )
{
	VS_SSAO_OUTPUT Out = (VS_SSAO_OUTPUT)0; 

	Out.Pos = Pos;
	Out.Tex.xy = Tex.xy + ViewportOffset;
	Out.Tex.zw = CalcJitterCoord(Tex.xy);
	Out.SmpStep.xy = CalcKernelSize(10.0);
	Out.SmpStep.zw = SampStep;

	// Out.AOFactor.rgb = LightColor;
	Out.AOFactor.w = GIScale;

	return Out;
}

float4 PS_SSGI( VS_SSAO_OUTPUT IN ) : COLOR
{
	float2 texCoord = IN.Tex.xy;

	GeometryInfo geom = GetWND(texCoord);
	float3 N = geom.nd.normal;
	float depth = geom.nd.depth;

	float angleAdd = GetAngleJitterOffset(IN.Tex.zw);
	float2 radiusMul = min(0.4, IN.SmpStep.xy / max(geom.nd.depth, 1.0)) / SSGIRayCount;
	float2 radiusAdd = IN.SmpStep.zw;
	float bias = 0.1;

	float2 sc;
	sincos(angleAdd, sc.x, sc.y);
	sc.xy *= ViewportAspect;
	// 向きが法線と反対なら180度回転させる
	float2 uvEnd = sc * SSGIRayCount * radiusMul + texCoord;
	float3 wposEnd = ReconstructWPos(uvEnd, geom.nd.depth);
	float dir = dot(N, wposEnd - geom.wpos);
	if (dir < 0.0) sc = -sc;

	float2 uv = sc * radiusAdd + texCoord;
	uv += sc * radiusMul * GetLengthJitter(IN.Tex.zw);

	float4 col = 0;
	for(int j = 0; j < SSGIRayCount; j++)
	{
		uv += sc * radiusMul;

		float t = j * 1.0 / SSGIRayCount;
		GeometryInfo geom1 = GetWND(uv);

		float3 v = geom1.wpos - geom.wpos;
		float vl = max(dot(v,v), 1e-4);
		float dvn = dot(v, N);
		float vn = saturate((dvn / sqrt(vl) - bias) / (1.0 - bias));
		float falloff = exp2(vl * -0.1) * (1.0 - t);
		float weight = falloff * vn;
		float dw = max(weight - col.w, 0);

		col += GetSSGIBaseColor(uv) * dw;
	}

	float4 result = col;

	// RSMの効果を足す
	#if RSMCount > 0
	float4 rsm = GetRSMColor(texCoord);
	result.rgb += rsm.rgb * IN.AOFactor.rgb * saturate(1.0 - result.w);
	result.w = saturate(result.w + rsm.w);
	#endif

	// スケーリング
	result.rgb *= IN.AOFactor.w;  // giScale

	return result;
}

VS_OUTPUT VS_BlurSSGI( float4 Pos : POSITION, float2 Tex : TEXCOORD0,
	uniform bool bBlurX, uniform float stepSize)
{
	VS_OUTPUT Out = (VS_OUTPUT)0; 
	Out.Pos = Pos;
	Out.Tex.xy = Tex.xy + WorkOffset;

	float2 offset = (bBlurX) ? float2(WorkSampStep.x, 0) : float2(0, WorkSampStep.y);
	Out.Tex.zw = offset * stepSize;

	return Out;
}

float4 PS_BlurSSGI( float4 Tex: TEXCOORD0, uniform sampler smp, uniform float stepSize) : COLOR
{
	float2 texCoord = Tex.xy;
	float2 offset = Tex.zw;

	float4 color0 = tex2D( smp, texCoord );
	NormalDepth nd0 = GetNormalDepthRaw(texCoord);
	float depthMargin = CalcDepthMargin(nd0.depth) * stepSize;

	GeometryInfo geom0 = GetWND(texCoord);

	float weightSum = BlurWeight[0];

	// 遮蔽されているほど重みを増す?
	weightSum *= (color0.w * 0.5 + 0.5);

	float4 Color = color0 * weightSum;

	[unroll] for(int i = 1; i < 8; i++)
	{
		float4 uv = offset.xyxy * float4(i,i, -i,-i) + texCoord.xyxy;
		NormalDepth ndp = GetNormalDepthRaw(uv.xy);
		NormalDepth ndn = GetNormalDepthRaw(uv.zw);
		float4 cp = tex2D(smp, uv.xy);
		float4 cn = tex2D(smp, uv.zw);

		GeometryInfo geomp = GetWND(uv.xy);
		GeometryInfo geomn = GetWND(uv.zw);
		float wp = saturate(1.0 - abs(dot(geomp.wpos - geom0.wpos, nd0.normal)));
		float wn = saturate(1.0 - abs(dot(geomn.wpos - geom0.wpos, nd0.normal)));
		wp *= BlurWeight[i] * CalcNormalWeight(nd0.normal, ndp.normal);
		wn *= BlurWeight[i] * CalcNormalWeight(nd0.normal, ndn.normal);

		// 遮蔽されているほど重みを増す?
		wp *= (cp.w * 0.5 + 0.5);
		wn *= (cn.w * 0.5 + 0.5);

		Color += cp * wp;
		Color += cn * wn;
		weightSum += wp;
		weightSum += wn;
	}

	Color = Color / weightSum;

	return Color;
}


float4 PS_SSGIUpscale( float4 Tex: TEXCOORD0, uniform sampler smp) : COLOR
{
	float2 texCoord = Tex.xy;

	NormalDepth nd0 = GetNormalDepthRaw(texCoord);
	float3 N = nd0.normal;

#if WORKSPACE_RES > 1

	float depthMargin = CalcDepthMargin(nd0);

	float4 result = 0;
	float weight = 0;

	NormalDepth nd1;
	float4 col1;
	float2 uv1;
	float w;

	texCoord = floor(texCoord * WorkSize) / WorkSize + ViewportOffset;
	float2 scale = WorkSampStep;

	#undef INTEGRATE_RESULT
	#define INTEGRATE_RESULT(u,v, w0)	\
		uv1 = texCoord + float2(u,v) * scale; \
		nd1 = GetNormalDepthRaw(uv1); \
		w = (abs(nd0.depth - nd1.depth) < depthMargin) * saturate(dot(N, nd1.normal)) * w0; \
		col1 = tex2D(smp, uv1); \
		result += col1 * w;	weight += w;

	INTEGRATE_RESULT( 1, 1, W2);
	INTEGRATE_RESULT( 0, 1, W1);
	INTEGRATE_RESULT(-1, 1, W2);

	INTEGRATE_RESULT( 1, 0, W1);
	INTEGRATE_RESULT(-1, 0, W1);

	INTEGRATE_RESULT( 1,-1, W2);
	INTEGRATE_RESULT( 0,-1, W1);
	INTEGRATE_RESULT(-1,-1, W2);

	INTEGRATE_RESULT( 0, 0, W0);
	if (weight < 1e-4)
	{
		result += col1;	weight += 1;
	}

	result /= weight;

#else

	float4 result = tex2D(smp, texCoord);

#endif

	result.w = saturate(1.0 - result.w);
	return result;
}

#endif




#if (SSAORayCount > 0 && ENABLE_SSGI > 0) || RLRRayCount > 0

float4 PS_CreateSSGIBase( float4 Tex: TEXCOORD0) : COLOR
{
	float2 texCoord = Tex.xy; // zw;
	float4 albedo = tex2D(ColorMap, texCoord);

	MaterialParam material = GetMaterial(texCoord, albedo);
	GeometryInfo geom = GetWND(texCoord);
	float roughness = material.roughness;
	float3 f0 = material.f0;

	float3 N = geom.nd.normal;
	float3 L = -LightDirection;
	float3 V = normalize(CameraPosition - geom.wpos);
	float shadow = tex2D(ShadowmapSamp, texCoord ).x;
	float3 ao = GetSSAO(texCoord);

	float3 diff = CalcDiffuse(L,N,V) * shadow * LightColor;
	diff += GetExtraDiffuseLight(texCoord).rgb * LightScale / PI;
	float4 EnvColor = GetEnvColor(N, 1.0);
	diff += EnvColor.rgb * ao * AmbientScale;
	diff *= IsNotMask(material);

	float3 spec = CalcSpecular(L, N, V, roughness, f0) * shadow * LightColor;
	spec += GetExtraSpecularLight(texCoord) * LightScale / PI;

	float4 baseColor;
	baseColor.rgb = albedo.rgb * (diff + material.emissive);
	baseColor.rgb += spec;
	baseColor.a = 1;

	return baseColor;
}

#endif
