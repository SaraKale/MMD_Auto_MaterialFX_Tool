
// 共通処理、カテゴリ分けから漏れた汎用処理


//-----------------------------------------------------------------------------
// マクロ

#define TO_STRING(str) #str


//-----------------------------------------------------------------------------
// 構造体

struct VS_OUTPUT {
	float4 Pos			: POSITION;
	float4 Tex			: TEXCOORD0;
};

//-----------------------------------------------------------------------------
// 

// ぼかし処理の重み係数：
float4 BlurWeightArray[] = {
	float4(0.0920246, 0.0902024, 0.0849494, 0.0768654),
	float4(0.0668236, 0.0558158, 0.0447932, 0.0345379)
};
static float BlurWeight[8] = (float[8])BlurWeightArray;


//-----------------------------------------------------------------------------
// 

// 線形で出力する?
bool bLinearMode : CONTROLOBJECT < string name = "ikLinearEnd.x"; >;

float3 ColorCorrectFromInput(float3 col)
{
	return (!bLinearMode) ? Degamma(col) : col;
}
float3 ColorCorrectToOutput(float3 col)
{
	return (!bLinearMode) ? Gamma(col) : col;
}


#define SAFE_EXP2(x)	(exp2(min((x), -epsilon)))

// ブラーの強さを計算する
float CalcWeightDepth(float depth)
{
	return (ViewportSize.y + 1) / max(depth * 8.0, 1);
}

float CalcWeightDepth(NormalDepth nd)
{
	float vz = abs(mul(nd.normal, (float3x3)matV).z);
	return CalcWeightDepth(nd.depth) * lerp(1.0/4.0, 1, vz);
}

float CalcDepthMargin(float depth)
{
	return max(depth * 8.0, 1) / (ViewportSize.y + 1);
}

float CalcDepthMargin(NormalDepth nd)
{
	float vz = abs(mul(nd.normal, (float3x3)matV).z);
	return CalcDepthMargin(nd.depth) * lerp(4, 1, vz);
}


float DepthDistance(float d0, float d1, float depthRate)
{
	float d = (d1 - d0) * depthRate;
	return d * d;
}

float CalcNormalWeight(float3 N0, float3 N1)
{
//	return saturate(dot(N0, N1) * 0.5 + 0.5);
	return saturate(dot(N0, N1) * 2.0 - 1.0);
}

float CalcBlurWeight(NormalDepth nd0, NormalDepth nd1, float r2, float depthRate)
{
	float d = DepthDistance(nd0.depth, nd1.depth, depthRate);
	float nn = CalcNormalWeight(nd0.normal, nd1.normal);
	return SAFE_EXP2(r2 - d) * nn;
}

float3 CalcBlurWeight3(NormalDepth nd0, NormalDepth nd1, float3 r2, float depthRate)
{
	float d = DepthDistance(nd0.depth, nd1.depth, depthRate);
	float nn = CalcNormalWeight(nd0.normal, nd1.normal);
	return SAFE_EXP2(r2 - d.xxx) * nn;
}

float2 CalcKernelSize(float r)
{
	return abs(r * 0.5 * 1.8 * matP._22 / matP._34) * ViewportAspect;
//	return abs(r * 0.5 * matP._22 / matP._34) * ViewportAspect;
}


// 画面端に近いか?
float CalcEdgeFalloff(float2 texCoord)
{
	float2 absTex = 1 - abs(texCoord * 2 - 1);
	float x = min(absTex.x, absTex.y);
	return saturate(x * (0.5 / 0.1));
}

// ベクトル方向を向く行列を返す
float3x3 branchlessONB(float3 n)
{
	float s = (n.z >= 0.0) ? 1 : -1;
	float a = -1.0f / (s + n.z);
	float b = n.x * n.y * a;
	float3 b1 = float3(1.0 + s * n.x * n.x * a, s * b, -s * n.x);
	float3 b2 = float3(b, s + n.y * n.y * a, -n.y);
	return float3x3(b1,b2,n);
}

float4 CalcReflectionVector(float3 TargetPos, float3 N)
{
	float3 V = normalize(TargetPos - CameraPosition);
	return float4(normalize(reflect(V, N)), 0);
}


//-----------------------------------------------------------------------------
// ジッター
float GetJitterOffset(float2 iuv)
{
	return tex2D(NoiseSamp, iuv).x;
}

float GetAngleJitterOffset(float2 iuv)
{
//	return tex2D(NoiseSamp, iuv).x * 2 * PI;
	return tex2D(NoiseSamp, iuv).y * 2 * PI;
}

float GetLengthJitter(float2 iuv)
{
	return frac(dot(iuv, float2(52.9898, 78.233)));
}

float2 CalcJitterCoord(float2 uv)
{
	return (uv * WorkSize + 0.5) / NOISE_TEXTURE_SIZE;
}

float2 CalcJitterCoordFull(float2 uv)
{
	return (floor(uv * ViewportSize) + 0.5) / NOISE_TEXTURE_SIZE;
}

float GradientNoise(float2 uv)
{
	float2 ppos = floor(uv * ViewportSize - 0.25);
	float3 magic = float3( 0.06711056, 0.00583715, 52.9829189 );
	return frac( magic.z * frac( dot( ppos, magic.xy )));
}


//-----------------------------------------------------------------------------
//

float3 GetEnvBRDF(float roughness, float dotNV, float3 f0)
{
#if 0
	float2 brdf = tex2D(EnvironmentBRDF, float2(roughness, dotNV)).xy;
	return (f0 * brdf.x + brdf.y);
#else
	float u = tex2D(EnvironmentBRDF, float2(roughness, dotNV)).x;
	return f0 + (1.0 - f0) * pow(u, 5);
#endif
}

float3 GetDiffuseEnvBRDF(float roughness, float dotNV, float3 f0)
{
#if 0
	return tex2D(EnvironmentBRDF, float2(roughness, dotNV)).z;
#else
	return 1.0 - GetEnvBRDF(roughness, dotNV, f0);
#endif
}

//-----------------------------------------------------------------------------
//

VS_OUTPUT VS_Buffer( float4 Pos : POSITION, float2 Tex : TEXCOORD0 )
{
	VS_OUTPUT Out = (VS_OUTPUT)0; 
	Out.Pos = Pos;
	Out.Tex = Tex.xyxy + float4(ViewportOffset, WorkOffset);
	return Out;
}

